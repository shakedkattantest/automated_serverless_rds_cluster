AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless stack for provisioning RDS (Postgres/MySQL) clusters

Resources:
# ================================================================================
# SECTION: API Gateway
# ================================================================================
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: RDSRequestAPI
      StageName: provision
      MethodSettings:
        - LoggingLevel: "OFF"
          MetricsEnabled: true
          ResourcePath: "/*"
          HttpMethod: "*"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "RDSRequestAPI"
          version: "1.0"
        paths:
          /request:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: body
                  name: body
                  schema:
                    $ref: "#/definitions/RDSRequest"
              x-amazon-apigateway-auth:
                  type: aws_iam
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:sns:action/Publish
                credentials:
                  Fn::GetAtt: ApiGatewayToSNSRole.Arn
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: |
                    Action=Publish
                    &TopicArn=arn:aws:sns:${AWS::Region}:${AWS::AccountId}:RDSProvisioningTopic
                    &Message=$util.urlEncode($input.body)
                passthroughBehavior: NEVER
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: |
                        {
                          "message": "Request received successfully."
                        }

        definitions:
          RDSRequest:
            type: object
            required:
              - db_name
              - env
              - engine
            properties:
              db_name:
                type: string
              env:
                type: string
                enum: [dev, prod]
              engine:
                type: string
                enum: [mysql, postgres]

  ApiGatewayToSNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ApiGatewayToSNSRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewaySNSPublish
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref SNSTopic


# ================================================================================
# SECTION: SNS and SQS
# ================================================================================
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: RDSProvisioningTopic


  RDSDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: RDSProvisioningDLQ
      MessageRetentionPeriod: 1209600 # 14 days

  DLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: RDSProvisioningDLQAlarm
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt RDSDLQ.QueueName
      AlarmDescription: "Messages in DLQ â€“ check failed Lambda executions"
      
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: RDSProvisioningQueue
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt RDSDLQ.Arn
        maxReceiveCount: 5

  SQSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt SQSQueue.Arn
      TopicArn: !Ref SNSTopic
      RawMessageDelivery: true
      DeliveryPolicy:
        healthyRetryPolicy:
          numRetries: 5
          minDelayTarget: 5
          maxDelayTarget: 10
          numNoDelayRetries: 1
          numMinDelayRetries: 2
          numMaxDelayRetries: 2
          backoffFunction: "linear"      

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "sqs:SendMessage"
            Resource: !GetAtt SQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SNSTopic

                
# ================================================================================
# SECTION: Lambda for RDS Provision 
# ================================================================================
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: RDSProvisionerFunction
      Handler: handler.lambda_handler
      Runtime: python3.12
      Architectures:
          - arm64
      CodeUri: lambda/
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue.Arn
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSPollerPolicy:
            QueueName: !Ref SQSQueue
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "*"
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref SQSQueue
          SNS_TOPIC_ARN: !Ref SNSTopic
          GITHUB_TOKEN: !Sub '{{resolve:secretsmanager:gh-lambda-token:SecretString:token}}'

          
# ================================================================================
# SECTION: Application Insights
# ================================================================================
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
          - ''
          - - ApplicationInsights-SAM-
            - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
          - ''
          - - ApplicationInsights-SAM-
            - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup

# ================================================================================
# SECTION: Outputs
# ================================================================================
Outputs:
  ApiInvokeUrl:
    Description: Invoke URL for the POST /request endpoint
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/provision/request"
